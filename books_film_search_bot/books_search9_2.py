# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –∏ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.#
# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª "books_search9_2.py".
# # –ë–æ—Ç –∑–∞–¥–∞–µ—Ç 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT –∫–Ω–∏–≥—É –∏ —Ñ–∏–ª—å–º –ø–æ–¥ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–æ–∂–Ω–æ:
# –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π;
# –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É –∏ —Ñ–∏–ª—å–º;
# –∑–∞–Ω–æ–≤–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–Ω–∏–≥–µ –∏ —Ñ–∏–ª—å–º—É.

import asyncio, os  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º–∞
import logging  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from openai import OpenAI  # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É OpenAI
import sqlite3  # –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from config import token_telegram, api_key, db_path, admin_id
from questions_all import questions # –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
from init_database import init_database_func    # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from load_user import load_user_func    # –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
from history_handler import register_history_handlers  # –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
from save_recomendations import save_recomendations_func
from extract_information import extract_information_func


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database_func(db_path)

bot = Bot(token=token_telegram)
dp = Dispatcher()

user_answers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_profiles = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–µ –∏ –≤–æ–∑—Ä–∞—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_search_history = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
exclude_books_titles = ''     # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
exclude_films_titles = ''    # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è


@dp.message(Command("start"))
async def ask_user_info(message: types.Message):
    print('---1 –°—Ç–∞—Ä—Ç---')
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°—Ç–∞—Ä—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç", callback_data="button_start")]
    ])
    await bot.send_message(user_id,
                           f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –∏ —Ñ–∏–ª—å–º –ø–æ–¥ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ –°—Ç–∞—Ä—Ç.",
                           reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.callback_query(lambda c: c.data == "button_start")
async def handle_start_button(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = user.id

    conn = sqlite3.connect(db_path) # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT gender, age FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if not user_data:
        cursor.execute("""
        INSERT INTO users (
            user_id, 
            telegram_username, 
            first_name, 
            last_name,
            language_code
        ) VALUES (?, ?, ?, ?, ?)
        """, (
            user_id,
            user.username,
            user.first_name,
            user.last_name,
            user.language_code
        ))
        conn.commit()

    conn.close()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[user_id] = []

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°—Ç–∞—Ä—Ç
    await callback.message.delete()

    if user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        gender, age = user_data
        user_profiles[user_id] = {"gender": gender, "age": age}
        await bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ {user.username}, —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏!")
        await ask_question(user_id, 0)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
             InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
        ])
        await bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –ø–æ–ª:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç.
@dp.callback_query(lambda c: c.data.startswith("gender_"))
async def handle_gender(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    gender = "–ú—É–∂—á–∏–Ω–∞" if callback.data == "gender_male" else "–ñ–µ–Ω—â–∏–Ω–∞"
    user_profiles[user_id] = {"gender": gender, "age": None}
    await callback.message.delete()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç 10 –¥–æ 18 –ª–µ—Ç", callback_data="age_18"),
         InlineKeyboardButton(text="19-25 –ª–µ—Ç", callback_data="age_19_25")],
        [InlineKeyboardButton(text="26-40 –ª–µ—Ç", callback_data="age_26_40"),
         InlineKeyboardButton(text="41-60 –ª–µ—Ç", callback_data="age_41_60")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ä—à–µ 60 –ª–µ—Ç", callback_data="age_60")]]
    )
    await bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç.
@dp.callback_query(lambda c: c.data.startswith("age_"))
async def handle_age(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    age_groups = {"age_18": "–û—Ç 10 –¥–æ 18 –ª–µ—Ç", "age_19_25": "19-25 –ª–µ—Ç", "age_26_40": "26-40 –ª–µ—Ç", "age_41_60": "41-60 –ª–µ—Ç",
                  "age_60": "–°—Ç–∞—Ä—à–µ 60 –ª–µ—Ç"}
    user_profiles[user_id]["age"] = age_groups[callback.data]

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite
    cursor.execute(
        "INSERT INTO users (user_id, gender, age) VALUES (?, ?, ?) ON CONFLICT(user_id) DO UPDATE SET gender = excluded.gender, age = excluded.age",
        (user_id, user_profiles[user_id]["gender"], user_profiles[user_id]["age"]))
    conn.commit()
    conn.close()

    await callback.message.delete()
    # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ –∏ –≤–æ–∑—Ä–∞—Å—Ç–µ
    await bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ {user_name}, —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏!")
    await ask_question(user_id, 0)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.
async def ask_question(user_id, question_index):
    if question_index < len(questions):
        question, options = questions[question_index]
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=option, callback_data=f"{question_index}_{i}")]
                for i, option in enumerate(options)
            ]
        )
        await bot.send_message(user_id, question, reply_markup=keyboard)
    else:
        await analyze_results(user_id, exclude_books_titles, exclude_films_titles)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞.
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–æ_—á–∏—Å–ª–æ
@dp.callback_query(lambda c: c.data and "_" in c.data and c.data.split("_")[0].isdigit())
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    question_index, answer_index = map(int, callback.data.split("_"))
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    user_answers.setdefault(user_id, []).append(
        f"{question_index + 1}: '{['–°–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ', '–ü–æ—Å–º–æ—Ç—Ä—é —Ñ–∏–ª—å–º: ', '–ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –∫–Ω–∏–≥–∞—Ö: ', '–ú–Ω–µ —Ö–æ—á–µ—Ç—Å—è: ', '–ù–æ–≤–æ–µ –∏–ª–∏ –∫–ª–∞—Å—Å–∏–∫–∞: '][question_index]}{questions[question_index][1][answer_index]}'")
    await callback.message.delete()
    await ask_question(user_id, question_index + 1)


# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ ChatGPT
# –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ
async def analyze_results(user_id, exclude_books_titles, exclude_films_titles):
    if user_id in user_answers:
        await bot.send_message(user_id, f"–ú–∏–Ω—É—Ç–∫—É, –æ–±—Ä–∞—â–∞—é—Å—å –∫ –ò–ò –∑–∞ —Å–æ–≤–µ—Ç–æ–º...")

        user_data = user_profiles.get(user_id, {})
        user_profile = f"–ü–æ–ª: {user_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}, –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        user_profile += "".join(user_answers[user_id])

        client = OpenAI(api_key=api_key)

        # ------------ –ü–æ–¥–±–æ—Ä –∫–Ω–∏–≥–∏  ------------
        exclude_items_books = '–°–ø–∞—Å–∏–±–æ'
        exclude_items_films = '–°–ø–∞—Å–∏–±–æ'

        # –ò—Å–∫–ª—é—á–∏–º —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
        if exclude_books_titles != '':
            exclude_items_books = '–ò—Å–∫–ª—é—á–∏ –∏–∑ –ø–æ–∏—Å–∫–∞: ' + exclude_books_titles

        chatgpt_prompt = f"""
        –ü–æ–¥–±–µ—Ä–∏ –∫–Ω–∏–≥—É –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç—Ä–µ—Ç–æ–º:
        {user_profile}. {exclude_items_books}
        """

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system",
                       "content": "–¢—ã –∫–Ω–∏–∂–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∫–Ω–∏–≥–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –æ —á–µ–ª–æ–≤–µ–∫–µ –∏ –ø–æ–¥ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏ ==–ê–≤—Ç–æ—Ä: <–∏–º—è –∞–≤—Ç–æ—Ä–∞> ==, ==–ù–∞–∑–≤–∞–Ω–∏–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏> =="},
                      {"role": "user", "content": chatgpt_prompt}]
        )
        book_recommendation = response.choices[0].message.content.strip()
        await bot.send_message(user_id, f"üìñ –Ø –ø–æ–¥–æ–±—Ä–∞–ª –í–∞–º –∫–Ω–∏–≥—É: \n{book_recommendation}")

        # –ü–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–∞
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        if exclude_films_titles != '':
            exclude_items_films = '–ò—Å–∫–ª—é—á–∏ –∏–∑ –ø–æ–∏—Å–∫–∞: ' + exclude_films_titles

        chatgpt_prompt = f"""
            –ü–æ–¥–±–µ—Ä–∏ —Ñ–∏–ª—å–º –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç—Ä–µ—Ç–æ–º:
            {user_profile}. {exclude_items_films}
        """

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system",
                       "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –¥–∞–Ω–Ω—ã–º –æ —á–µ–ª–æ–≤–µ–∫–µ –∏ –ø–æ–¥ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏ ==–§–∏–ª—å–º: <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞> =="},
                      {"role": "user", "content": chatgpt_prompt}],
            temperature=0.7
        )
        movie_recommendation = response.choices[0].message.content.strip()

        await bot.send_message(user_id, f"üé¨ –Ø –ø–æ–¥–æ–±—Ä–∞–ª –í–∞–º —Ñ–∏–ª—å–º: \n{movie_recommendation}")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ –∏ —Ñ–∏–ª—å–º–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
        full_text = f"{book_recommendation}\n{movie_recommendation}"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        extracted_info = extract_information_func(full_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_recomendations_func(user_id, extracted_info, db_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_search_history:
            user_search_history[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_search_history[user_id].append(extracted_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        current_date = datetime.now().strftime("%Y-%m-%d")
        user_no, username, user_first_name, user_last_name = load_user_func(db_path, user_id)
        await bot.send_message(admin_id, f"{current_date}, {user_no} {username}, –§–ò–û: {user_first_name}, {user_last_name}. –ù–∞–π–¥–µ–Ω–æ: {extracted_info}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –∏ —Ñ–∏–ª—å–º–æ–≤", callback_data="show_history")],
            [InlineKeyboardButton(text="üîÑ –Ø –∑–∞–ø–æ–º–Ω–∏–ª –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü–æ–∏—â–µ–º –µ—â–µ —Ä–∞–∑?", callback_data="search_again")],
            [InlineKeyboardButton(text="üòä –ü–æ–º–µ–Ω—è–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ —Ä–∞–∑!", callback_data="new_questionnaire")]
        ])
        await bot.send_message(user_id, "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                               reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        # –ù–ï —É–¥–∞–ª—è–µ–º user_answers[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—â–µ–º –µ—â–µ —Ä–∞–∑?"
@dp.callback_query(lambda c: c.data == "search_again")
async def handle_search_again(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.delete()

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏ –∏ —Ñ–∏–ª—å–º–∞
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    exclude_books_titles_list = [item['title'] for item in user_search_history[user_id]]
    exclude_books_titles = ', '.join(exclude_books_titles_list)

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    exclude_films_titles_list = [item['movie'] for item in user_search_history[user_id]]
    exclude_films_titles = ', '.join(exclude_films_titles_list)

    await bot.send_message(user_id, "–ò—â—É –Ω–æ–≤—ã–µ –∫–Ω–∏–≥—É –∏ —Ñ–∏–ª—å–º...")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    await analyze_results(user_id, exclude_books_titles, exclude_films_titles)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–µ–Ω—è–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ —Ä–∞–∑!"
@dp.callback_query(lambda c: c.data == "new_questionnaire")
async def handle_new_questionnaire(callback: types.CallbackQuery):
    print('callback:', callback)
    user_id = callback.from_user.id
    await callback.message.delete()

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å
    user_answers[user_id] = []
    await bot.send_message(user_id, "–î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —Ç–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!")
    await ask_question(user_id, 0)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥.
async def main():
    logging.basicConfig(level=logging.INFO)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
    register_history_handlers(dp, bot, db_path)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())