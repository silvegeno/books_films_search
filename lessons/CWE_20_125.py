# -*- coding: utf-8 -*-
# Пример кода с уязвимостями с помощью https://app.whiterabbitneo.com/

import os

# --------------------------- CWE-20 ----------------------
# входные данные не проверяются должным образом.
# Это # позволяет злоумышленникам внедрять вредоносный код или контент.
def vulnerable_function_CWE_20():
    user_input = input("Enter a directory: ")
    command = "dir " + user_input
    command.encode('cp1251').decode('utf-8')
    os.system(command)

# Example usage
# vulnerable_function_CWE_20()

# ---------------------CWE-125-------------------------------------
# Чтение вне границ. Она возникает, когда программа считывает
# данные из буфера, используя индекс, который находится
# за пределами границ буфера
# В этом коде vulnerable_functionберет пользовательский ввод и
# пытается десериализовать его с помощью pickle.loads функции.
# Однако это может привести к уязвимостям десериализации,
# если пользовательский ввод не проверен или не очищен должным образом.
# Злоумышленник может потенциально использовать эту уязвимость,
# предоставляя вредоносные сериализованные данные, которые могут
# быть десериализованы и выполнены в системе. Например,
# злоумышленник может отправить сериализованный объект, с
# одержащий вредоносную функцию или класс, который будет
# выполнен при десериализации.
# Чтобы предотвратить эту уязвимость, необходимо выполнить
# проверку и очистку входных данных, предоставленных пользователем,
# перед их десериализацией. Кроме того, использование безопасных
# форматов сериализации, таких как JSON или XML, может помочь
# предотвратить атаки десериализации.
#
# Также важно использовать безопасные методы кодирования,
# например избегать использования функций evalили exec,
# а также использовать параметризованные запросы или
# подготовленные операторы при взаимодействии с базами данных.

import pickle
import os

# Vulnerable code
def vulnerable_function_CWE_125(user_input):
    deserialized_data = pickle.loads(user_input)
    # Process deserialized data

# Example usage
class MaliciousClass:
    def __reduce__(self):
        return (os.system, ('whoami',))

malicious_data = pickle.dumps(MaliciousClass())
print("Malicious serialized data:", malicious_data)

user_input = malicious_data
vulnerable_function_CWE_125(user_input)



