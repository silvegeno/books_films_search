# –∫–æ–¥ –≤ –ø–∏—á–∞—Ä–º - —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
import logging

import random

logging.basicConfig(level=logging.INFO)

API_TOKEN = '–¢–≤–æ–π API —Ç–µ–ª–µ–≥—Ä–∞–º'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üòä")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /user
@dp.message(Command("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
async def cmd_user(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü§™")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    number = random.randint(1, 7)
    await message.answer("–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç")
    await message.answer("–¢–≤–æ—ë —á–∏—Å–ª–æ {number}")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())