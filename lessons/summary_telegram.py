# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
# –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏, —á—Ç–æ —Ç–∞–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∑–∞ –¥–µ–Ω—å

# pip install aiogram telethon sumy python-dotenv
# –ß–µ—Ä–µ–∑ Telethon: –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–≤ (–Ω—É–∂–µ–Ω API ID –∏ API Hash –æ—Ç Telegram)
# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å —á–µ—Ä–µ–∑ apscheduler.
# –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã.
# –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å SQLite –∏–ª–∏ Redis, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã).

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from telethon import TelegramClient
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# üîπ –¢–æ–∫–µ–Ω—ã –∏ API-–∫–ª—é—á–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_ID = os.getenv("API_ID")        # Telegram API ID
API_HASH = os.getenv("API_HASH")    # Telegram API HASH

# üîπ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–æ—Ç
CHANNELS = ["@example_channel1", "@example_channel2"]

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot)

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon-–∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient("session_name", API_ID, API_HASH)

async def fetch_messages():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥–µ–ª–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏."""
    summaries = []
    await client.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç

    for channel in CHANNELS:
        async for message in client.iter_messages(channel, limit=5):  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤
            if message.text:
                summary = summarize_text(message.text)
                summaries.append(f"üîπ **{channel}**: {summary}")

    await client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç
    return "\n\n".join(summaries) if summaries else "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."

def summarize_text(text):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Sumy."""
    parser = PlaintextParser.from_string(text, Tokenizer("russian"))
    summarizer = LsaSummarizer()
    summary = summarizer(parser.document, 2)  # –ë–µ—Ä—ë–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    return " ".join([str(sent) for sent in summary])

@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Å–≤–æ–¥–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –ù–∞–ø–∏—à–∏ /summary, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")

@dp.message_handler(commands=["summary"])
async def summary_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å."""
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    summary = await fetch_messages()
    await message.answer(summary)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(client.start())  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω
    executor.start_polling(dp, skip_updates=True)
